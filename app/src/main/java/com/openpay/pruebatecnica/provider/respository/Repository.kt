package com.openpay.pruebatecnica.provider.respositoryimport com.openpay.pruebatecnica.data.database.dao.PopularMovieDAOimport com.openpay.pruebatecnica.data.database.dao.ProfileDAOimport com.openpay.pruebatecnica.data.database.dao.RatedMovieDAOimport com.openpay.pruebatecnica.data.database.dao.RatedTVDAOimport com.openpay.pruebatecnica.data.database.dao.TopRatedMovieDAOimport com.openpay.pruebatecnica.data.database.dao.TrendingMovieDAOimport com.openpay.pruebatecnica.data.database.entity.PopularMovieimport com.openpay.pruebatecnica.data.database.entity.Profileimport com.openpay.pruebatecnica.data.database.entity.RatedMovieimport com.openpay.pruebatecnica.data.database.entity.RatedTVimport com.openpay.pruebatecnica.data.database.entity.TopRatedMovieimport com.openpay.pruebatecnica.data.database.entity.TrendingMovieimport com.openpay.pruebatecnica.data.model.ResponseProfileModelimport com.openpay.pruebatecnica.data.model.ResponseRatedMovieModelimport com.openpay.pruebatecnica.data.model.ResponseRatedTVModelimport com.openpay.pruebatecnica.provider.service.network.NetworkServiceimport javax.inject.Injectclass Repository @Inject constructor(    private val networkService: NetworkService,    private val profileDAO: ProfileDAO,    private val ratedTvDAO: RatedTVDAO,    private val ratedMovieDAO: RatedMovieDAO,    private val popularMovieDAO: PopularMovieDAO,    private val topRatedMovieDAO: TopRatedMovieDAO,    private val trendingMovieDAO: TrendingMovieDAO) {    /**     * APIï¿½s     **/    suspend fun loadProfile(): ResponseProfileModel? {        return networkService.loadProfile()    }    suspend fun loadRatedTV(): ResponseRatedTVModel? {        return networkService.loadRatedTV()    }    suspend fun loadRatedMovie(): ResponseRatedMovieModel? {        return networkService.loadRatedMovie()    }    suspend fun loadPopularMovies(pageNumber: Int): ResponseRatedMovieModel? {        return networkService.loadPopularMovies(pageNumber)    }    suspend fun loadTopRatedrMovies(pageNumber: Int): ResponseRatedMovieModel? {        return networkService.loadTopRatedMovies(pageNumber)    }    suspend fun loadTrendingMovie(): ResponseRatedMovieModel? {        return networkService.loadTrendingMovie()    }    /**     * Data Base     */    suspend fun getProfiles(): List<Profile>? {        return profileDAO.getAll()    }    suspend fun findProfileById(id: Long): Profile? {        return profileDAO.findById(id)    }    suspend fun updateProfile(profile: Profile): Any {        return profileDAO.update(profile)    }    suspend fun saveProfile(profile: Profile): Any {        return profileDAO.insert(profile)    }    suspend fun saveRatedTV(ratedTV: RatedTV): Any {        return ratedTvDAO.insert(ratedTv = ratedTV)    }    suspend fun getAllRatedsTV(): List<RatedTV>?{        return ratedTvDAO.getAll()    }    suspend fun saveRatedMovie(ratedMovie: RatedMovie): Any {        return ratedMovieDAO.insert(ratedMovie = ratedMovie)    }    suspend fun getAllRatedsMovie(): List<RatedMovie>?{        return ratedMovieDAO.getAll()    }    suspend fun findRatedTVById(id: Long): RatedTV? {        return ratedTvDAO.findById(id)    }    suspend fun updateRatedTV(ratedTV: RatedTV): Int {        return ratedTvDAO.update(ratedTV)    }    suspend fun findRatedMovieById(id: Long): RatedMovie? {        return ratedMovieDAO.findById(id)    }    suspend fun updateRatedMovie(ratedMovie: RatedMovie): Int {        return ratedMovieDAO.update(ratedMovie)    }    suspend fun savePopularMovie(popularMovie: PopularMovie): Long {        return popularMovieDAO.insert(popularMovie)    }    suspend fun getAllPopularMovie(): List<PopularMovie> {        return popularMovieDAO.getAll()    }    suspend fun updatePopularMovie(popularMovie: PopularMovie): Int {        return popularMovieDAO.update(popularMovie)    }    suspend fun findPopularMovieById(id: Long): PopularMovie? {        return popularMovieDAO.findById(id)    }    suspend fun saveTopRatedMovie(topRatedMovie: TopRatedMovie): Long {        return topRatedMovieDAO.insert(topRatedMovie)    }    suspend fun getAllTopRatedMovie(): List<TopRatedMovie> {        return topRatedMovieDAO.getAll()    }    suspend fun findTopRatedMovieById(id: Long): TopRatedMovie? {        return topRatedMovieDAO.findById(id)    }    suspend fun updateTopRatedMovie(popularMovie: TopRatedMovie): Int {        return topRatedMovieDAO.update(popularMovie)    }    suspend fun saveTrendingMovie(trendingMovie: TrendingMovie): Long {        return trendingMovieDAO.insert(trendingMovie)    }    suspend fun getAllTrendingMovies(): List<TrendingMovie> {        return trendingMovieDAO.getAll()    }    suspend fun findTrendingMovieById(id: Long): TrendingMovie? {        return trendingMovieDAO.findById(id)    }    suspend fun updateTrendingMovie(trendingMovie: TrendingMovie): Int {        return trendingMovieDAO.update(trendingMovie)    }}